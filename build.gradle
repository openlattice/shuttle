plugins {
    id "application"
    id "java"
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
    id 'org.jetbrains.dokka' version '0.9.17'
    id "signing"
    id "eclipse"
    id "maven-publish"
    id "idea"
    id "jacoco"
}

description = "shuttle"
group = "com.openlattice"

// keep the following block above the "apply from"
ext.projectName = "shuttle"
ext.scmUrl = 'scm:git:https://github.com/openlattice/shuttle.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/shuttle.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/shuttle.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"

distTar {
    archiveName "shuttle.tgz"
}

jacoco {
    toolVersion = "0.8.2"
}

mainClassName = "com.openlattice.shuttle.ShuttleKt"
applicationDefaultJvmArgs = ["-Xmx1G", "-Xms1G", "-server"]
sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

def S_ARGS = "$System.env.SHUTTLE_ARGS"

run {
    if (S_ARGS != null) {
        args S_ARGS.split()
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
    if (project.hasProperty('appArgs')) {
        args Eval.me(appArgs)
    }

}

def versions = [
        checkstyle: '7.4',
]


configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}


jar {
    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect { it.getName() }.join(" ")
        }
    }
}

dependencies {

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    
//    compile 'com.auth0:auth0:1.1.0'
//    compile 'com.auth0:java-jwt:3.2.0'

    compile 'commons-cli:commons-cli:1.4'
    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'com.sun.xml.bind:jaxb-core:2.2.11'
    compile 'com.sun.xml.bind:jaxb-impl:2.2.11'
    compile 'javax.activation:activation:1.1.1'

    compile "org.jodd:jodd-mail:5.0.7"

    compile 'com.microsoft.sqlserver:mssql-jdbc:7.2.0.jre11'
    compile 'org.postgresql:postgresql:42.2.5'

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome")
        compile project(":api")

        testCompile(project(path: ":api", configuration: "tests"))
        testCompile(project(path: ":rhizome", configuration: "tests"))
        testCompile(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:rhizome:${rhizome_version}"
        compile "com.openlattice:api:${api_version}"

        testCompile "com.openlattice:api:${api_version}:tests"
        testCompile "com.openlattice:rhizome:${rhizome_version}:tests"
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    compile fileTree(dir: "lib/", include: "*.jar")

    testCompile 'io.findify:s3mock_2.12:0.2.5'
    testCompile "junit:junit:${junit_version}"
    testCompile "org.mockito:mockito-core:2.2.7"

    if (project.hasProperty("developmentMode") && project.developmentMode) {
        testCompile project(":api")
    } else {
        testCompile "com.openlattice:api:${api_version}"
    }
}

startScripts {
    classpath = files(jar.archivePath)
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_1_10
    ext.targetCompatibility = JavaVersion.VERSION_1_10
}

eclipse.classpath.plusConfigurations += [configurations.provided]


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

