import java.util.regex.MatchResult
import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id "application"
    id "java"
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.10'
    id 'org.jetbrains.dokka' version '0.9.18'
    id 'com.github.spotbugs' version '4.6.0'
    id "signing"
    id "eclipse"
    id "checkstyle"
    id "maven-publish"
    id "idea"
    id "jacoco"
}

description = "shuttle"
group = "com.openlattice"

// keep the following block above the "apply from"
ext.projectName = "shuttle"
ext.scmUrl = 'scm:git:https://github.com/openlattice/shuttle.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/shuttle.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/shuttle.git'

apply from: "https://raw.githubusercontent.com/openlattice/openlattice/main/gradles/openlattice.gradle"

distTar {
    archiveName "shuttle.tgz"
}

jacoco {
    toolVersion = "0.8.2"
}

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri('https://raw.githubusercontent.com/openlattice/openlattice/main/gradles/checkstyle.xml')
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

spotbugsTest {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

mainClassName = "com.openlattice.shuttle.ShuttleCliKt"

def S_ARGS = "$System.env.SHUTTLE_ARGS"
def S_XMS = "$System.env.SHUTTLE_XMS"
def S_XMX = "$System.env.SHUTTLE_XMX"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (S_XMS == 'null' || S_XMS == null || S_XMS == "") {
    S_XMS = '-Xms1g'
}

if (S_XMX == 'null' || S_XMX == null || S_XMX == "") {
    S_XMX = '-Xms4g'
}

if (S_ARGS == 'null' || S_ARGS == null || S_ARGS == "") {
    S_ARGS = 'local postgres medialocal auditlocal'
}


if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

println "Using java args for running ${projectName}: Xms=" + S_XMS + ",Xmx=" + S_XMX + ",forkJoinPool=" + PARALLEL + " -server"

applicationDefaultJvmArgs = ["-Xmx1G", "-Xms1G", "-server", PARALLEL]
applicationDefaultJvmArgs += ["--add-modules", "java.base",
                              "--add-modules", "java.se",
                              "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                              "--add-opens","java.base/java.lang=ALL-UNNAMED",
                              "--add-opens","java.base/java.nio=ALL-UNNAMED",
                              "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                              "--add-opens","java.management/sun.management=ALL-UNNAMED",
                              "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                              "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

run {
    if (System.getProperty("exec.args") != null) {
        Pattern pat = Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");
        List<String> execArgs = new ArrayList<String> ();
        MatchResult matcher = pat.matcher(System.getProperty("exec.args"));
        while (((Matcher)matcher).find()){
            execArgs.add(matcher.group(0))
        }
        args execArgs
    } else if (S_ARGS != null) {
        args S_ARGS.split()
    } else if (project.hasProperty('appArgs')) {
        args Eval.me(appArgs)
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    provided
    implementation {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}


jar {
    doFirst {
        manifest {
            attributes (
                    "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
    }
}

test {
    ignoreFailures = true
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"

    implementation "commons-cli:commons-cli:$commons_cli_version"
    implementation "javax.xml.bind:jaxb-api:$jaxb_api_version"
    implementation "com.sun.xml.bind:jaxb-core:$jaxb_core_version"
    implementation "com.sun.xml.bind:jaxb-impl:$jaxb_api_version"
    implementation "javax.activation:activation:$javax_activation_version"

    implementation "org.jodd:jodd-mail:$jodd_mail_version"

    implementation "com.microsoft.sqlserver:mssql-jdbc:$mssql_jdbc_version"
    implementation "org.postgresql:postgresql:$postgresql_version"

    implementation "com.openlattice:api:${api_version}"
    implementation "com.openlattice:rhizome:${rhizome_version}"
    implementation "com.openlattice:rhizome-client:${rhizome_client_version}"
    implementation "com.openlattice:conductor-client:${conductor_client_version}"

    testImplementation "com.openlattice:api:${api_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":api", configuration: "tests"))
        testImplementation(project(path: ":rhizome", configuration: "tests"))
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:api:${api_version}:tests"
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    implementation fileTree(dir: "lib/", include: "*.jar")

    testImplementation "io.findify:s3mock_2.12:$s3mock_version"
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.mockito:mockito-core:$mockito_version"
}

startScripts {
    classpath = files(jar.archivePath)
}

tasks.withType(JavaCompile) {
    options.compilerArgs+= ["--add-modules", "java.base",
                            "--add-modules", "java.se",
                            "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += ["--add-modules", "java.base",
                "--add-modules", "java.se",
                "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                "--add-opens","java.base/java.lang=ALL-UNNAMED",
                "--add-opens","java.base/java.nio=ALL-UNNAMED",
                "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens","java.management/sun.management=ALL-UNNAMED",
                "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

eclipse.classpath.plusConfigurations += [configurations.provided]


